---
layout: post
title:  "Tutorials in Using HarvestAPI in PHP (Pt. 3)"
date:   2014-10-08 11:31:00
categories: jekyll update
---

On Wednesday October 8, 2014 I continued working on HarvestAPI with PHP. Used the endpoints Crop and Prices 
and did a search to show me some of the results in a table. <br/>

<h2> <b> Navigating Through Crops Using HarvestAPI </b> </h2> 
<br/>

<h3> <b> Going Through Crops Endpoint </b> </h3>
You can check out the crops endpoint at: <a href="http://harvestdata.herokuapp.com/crops/"> HarvestAPI Crops </a> <br/>

<h3> <b> Accessing The Crop Data Through a PHP Snippet </b> </h3> 
Now you can access the data with any platform of your choice, but for me I will be using PHP especially since
from the previous page I created a connection to HarvestAPI utilizing both PHP and cURL called `CallHarvestAPI.php`. 
You can see a view of the snippet below: 
<br/><br/>

{% highlight PHP %}
<?php
	include("CallHarvestAPI.php");

	/*---------------------------------------------------------------------------------------*/
	/*---------------------------------- Crop Details ---------------------------------------*/
	/*---------------------------------------------------------------------------------------*/
		
	$cropname = $_GET['crop_name'];

	// call crops resource to return string
	$crops = CallAPI('GET', 'harvestdata.herokuapp.com/crops/',
				array('search'=>$cropname, 'ordering'=>'-plant_date'));

	//convert JSON string to PHP variable (object)
	$crop_objects = json_decode($crops);
		
	$num_crops = $crop_objects -> count;
	$next_page_crop_url  = $crop_objects -> next;
		
	// getting the actual crops from results
	$crops_dem = $crop_objects -> results;
?>
	
<form action="crops.php" method="get">
	<fieldset>
		<legend> Search By Crop Name </legend>
		Crop Name <input type="text" name = "crop_name"/> <input type="submit"/>			
	</fieldset>
	
	</form>		
	<br />
	<br />
	<table>
		<tr>
			<td> Crop Name </td>
			<td> Estimated Volume </td>	
			<td> Area </td>
			<td> Plant Date </td>
			<td> Expiry Date </td>
		</tr>
			
<?php 
			
foreach($crops_dem as $crop)
{
	echo '<tr>
			<td>'.$crop -> crop_name.'</td>
			<td>'.$crop -> estimated_vol. '</td>
			<td>'.$crop -> area. '</td>
			<td>'.$crop -> plant_date. '</td>
			<td>'.$crop -> exp_date. '</td>
			</tr>';			
}				
?>
{% endhighlight %}

<br/><br/>
From the above snippet called `Crops.php`, in line 11, we used an include function which calls back the `CallHarvestAPI.php` snippet.
On line 8 we created a variable name  called <b> $cropname </b> which defines `$_GET['crop_name']`. The variable `crop_name` is in 
fact a field in crops endpoint and is seen again in line 27 in our form. The aim is to search for a crop name to display a 
list with the fields in the table. <br/>
In lines 11-12 a variable called $crops and it is equivalent to CallAPI function that has 3 parameters. 
If you recall the CallAPI function that was in CallHarvestAPI.php the parameters include:
<ul>
	<li> $method = 'GET' </li>
	<li> $url = 'harvestdata.herokuapp.com/crops/'</li>
	<li> $data = array('search'=>$cropname, 'ordering'=>'-plant_date') </li>
</ul>
<br/>
NB. For the <b> $data </b> variable, you can use any variable name such as `common_name`, `farm`, `farm_id`, `parish`.	<br/>
`Crops Endpoint` consists of field names such as `{"crop_name", "common_name", "estimated_vol", "variety, "plant_date", "count",
"area", "status", "exp_date", "farm"}`. Also, the ordering is done by plant_date in descending order since there is a (-) before 
the term `plant_date`.

<ul>
	<li>
		In line 14, <b> <u>json_decode</u> </b> is used to decode a JSON string and then it becomes a PHP variable <b> $crop_objects. </b>
	</li>
	<li>
		In line 16, <b> $num_crops </b> keeps a count of the number of crops.				  	
	</li>
				  	
	<li>
		In line 20, <b> $crops_dem </b> gets the crops from results.				  	
	</li>